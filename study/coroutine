
- 코루틴 안에 정의된 값들이 전부 비동기적으로 움직임
- 결과값이 필요없을 때 launch
- 결과값이 필요할 때 async
- GlobalScope.launch : 전역 스코프에서 코루틴을 실행합니다. 앱 전체에서 독립적인 비동기 작업을 수행할 때 사용
- 기본 launch
fun main() = runBlocking {
	launch {
		println("Task 1 starts")
		delay(1000)
		println("Task 1 ends")
	}
	println("Main function ends")
}
- coroutineScope안에 launch를 정의하면 정의된 launch들이 모두 끝날때까지 기다림
fun main() = runBlocking {
	coroutineScope {
		launch {
			println("Task 1 starts")
			delay(1000)
			println("Task 1 ends")
		}
		launch {
			println("Task 2 starts")
			delay(500)
			println("Task 2 ends")
		}
		println("CoroutineScope block ends")
	}
	println("Main function ends")
}


- runBlocking {}
: 동기적, 코루틴을 차단하여 실행 즉 {} 안에 정의 된 코드들은 launch 같은거 없이는 그냥 동기적으로 실행됨 하지만 안에 정의된 코드들이 모두 실행되어야 다음 코드로 넘어감(블로킹)

- GlobalScope.launch {}
: 비동기적이고, 완료를 기다리지 않으며 프로그램 생명주기와 관계없이 실행 백그라운드에서 실행될 수 있음

- coroutineScope.launch
: 비동기적이고, 자식 코루틴이 완료될 때까지 기다립니다.
그래서 runBlocking안에 GlobalScope.launch를 정의하는것은 바람직하지 못함 => 어차피 따로 움직임

- runBlocking 안에 coroutineScope.launch는 같이 움직임 즉 coroutineScope.launch가 끝날때까지 runBlocking의 블로킹 유지됨

- coroutineScope 은 Runblocking 같이 내부에 모든 작업을 기다림
suspend fun example1() = coroutineScope {
    launch {
        delay(1000)
        println("Done") // 이 출력을 기다립니다
    }
    println("Will print after Done")
}

- coroutineScope.launch는 비동기적 실행
suspend fun example2() {
    coroutineScope.launch {
        delay(1000)
        println("Done") // 이 출력을 기다리지 않습니다
    }
    println("Will print before Done")
}